// source: orderer/clusterserver.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.orderer.ClusterNodeServiceStepRequest', null, global);
goog.exportSymbol('proto.orderer.ClusterNodeServiceStepRequest.PayloadCase', null, global);
goog.exportSymbol('proto.orderer.ClusterNodeServiceStepResponse', null, global);
goog.exportSymbol('proto.orderer.ClusterNodeServiceStepResponse.PayloadCase', null, global);
goog.exportSymbol('proto.orderer.NodeAuthRequest', null, global);
goog.exportSymbol('proto.orderer.NodeConsensusRequest', null, global);
goog.exportSymbol('proto.orderer.NodeTransactionOrderRequest', null, global);
goog.exportSymbol('proto.orderer.TransactionOrderResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.ClusterNodeServiceStepRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.orderer.ClusterNodeServiceStepRequest.oneofGroups_);
};
goog.inherits(proto.orderer.ClusterNodeServiceStepRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.ClusterNodeServiceStepRequest.displayName = 'proto.orderer.ClusterNodeServiceStepRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.ClusterNodeServiceStepResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.orderer.ClusterNodeServiceStepResponse.oneofGroups_);
};
goog.inherits(proto.orderer.ClusterNodeServiceStepResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.ClusterNodeServiceStepResponse.displayName = 'proto.orderer.ClusterNodeServiceStepResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.NodeConsensusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.NodeConsensusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.NodeConsensusRequest.displayName = 'proto.orderer.NodeConsensusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.NodeTransactionOrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.NodeTransactionOrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.NodeTransactionOrderRequest.displayName = 'proto.orderer.NodeTransactionOrderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.TransactionOrderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.TransactionOrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.TransactionOrderResponse.displayName = 'proto.orderer.TransactionOrderResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.NodeAuthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.NodeAuthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.NodeAuthRequest.displayName = 'proto.orderer.NodeAuthRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.orderer.ClusterNodeServiceStepRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.orderer.ClusterNodeServiceStepRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  NODE_CONREQUEST: 1,
  NODE_TRANREQUEST: 2,
  NODE_AUTHREQUEST: 3
};

/**
 * @return {proto.orderer.ClusterNodeServiceStepRequest.PayloadCase}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.orderer.ClusterNodeServiceStepRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.orderer.ClusterNodeServiceStepRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.ClusterNodeServiceStepRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.ClusterNodeServiceStepRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.ClusterNodeServiceStepRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeConrequest: (f = msg.getNodeConrequest()) && proto.orderer.NodeConsensusRequest.toObject(includeInstance, f),
    nodeTranrequest: (f = msg.getNodeTranrequest()) && proto.orderer.NodeTransactionOrderRequest.toObject(includeInstance, f),
    nodeAuthrequest: (f = msg.getNodeAuthrequest()) && proto.orderer.NodeAuthRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.ClusterNodeServiceStepRequest}
 */
proto.orderer.ClusterNodeServiceStepRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.ClusterNodeServiceStepRequest;
  return proto.orderer.ClusterNodeServiceStepRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.ClusterNodeServiceStepRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.ClusterNodeServiceStepRequest}
 */
proto.orderer.ClusterNodeServiceStepRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orderer.NodeConsensusRequest;
      reader.readMessage(value,proto.orderer.NodeConsensusRequest.deserializeBinaryFromReader);
      msg.setNodeConrequest(value);
      break;
    case 2:
      var value = new proto.orderer.NodeTransactionOrderRequest;
      reader.readMessage(value,proto.orderer.NodeTransactionOrderRequest.deserializeBinaryFromReader);
      msg.setNodeTranrequest(value);
      break;
    case 3:
      var value = new proto.orderer.NodeAuthRequest;
      reader.readMessage(value,proto.orderer.NodeAuthRequest.deserializeBinaryFromReader);
      msg.setNodeAuthrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.ClusterNodeServiceStepRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.ClusterNodeServiceStepRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.ClusterNodeServiceStepRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeConrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orderer.NodeConsensusRequest.serializeBinaryToWriter
    );
  }
  f = message.getNodeTranrequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.orderer.NodeTransactionOrderRequest.serializeBinaryToWriter
    );
  }
  f = message.getNodeAuthrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.orderer.NodeAuthRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeConsensusRequest node_conrequest = 1;
 * @return {?proto.orderer.NodeConsensusRequest}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.getNodeConrequest = function() {
  return /** @type{?proto.orderer.NodeConsensusRequest} */ (
    jspb.Message.getWrapperField(this, proto.orderer.NodeConsensusRequest, 1));
};


/**
 * @param {?proto.orderer.NodeConsensusRequest|undefined} value
 * @return {!proto.orderer.ClusterNodeServiceStepRequest} returns this
*/
proto.orderer.ClusterNodeServiceStepRequest.prototype.setNodeConrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.orderer.ClusterNodeServiceStepRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.ClusterNodeServiceStepRequest} returns this
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.clearNodeConrequest = function() {
  return this.setNodeConrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.hasNodeConrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeTransactionOrderRequest node_tranrequest = 2;
 * @return {?proto.orderer.NodeTransactionOrderRequest}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.getNodeTranrequest = function() {
  return /** @type{?proto.orderer.NodeTransactionOrderRequest} */ (
    jspb.Message.getWrapperField(this, proto.orderer.NodeTransactionOrderRequest, 2));
};


/**
 * @param {?proto.orderer.NodeTransactionOrderRequest|undefined} value
 * @return {!proto.orderer.ClusterNodeServiceStepRequest} returns this
*/
proto.orderer.ClusterNodeServiceStepRequest.prototype.setNodeTranrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.orderer.ClusterNodeServiceStepRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.ClusterNodeServiceStepRequest} returns this
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.clearNodeTranrequest = function() {
  return this.setNodeTranrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.hasNodeTranrequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NodeAuthRequest node_authrequest = 3;
 * @return {?proto.orderer.NodeAuthRequest}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.getNodeAuthrequest = function() {
  return /** @type{?proto.orderer.NodeAuthRequest} */ (
    jspb.Message.getWrapperField(this, proto.orderer.NodeAuthRequest, 3));
};


/**
 * @param {?proto.orderer.NodeAuthRequest|undefined} value
 * @return {!proto.orderer.ClusterNodeServiceStepRequest} returns this
*/
proto.orderer.ClusterNodeServiceStepRequest.prototype.setNodeAuthrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.orderer.ClusterNodeServiceStepRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.ClusterNodeServiceStepRequest} returns this
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.clearNodeAuthrequest = function() {
  return this.setNodeAuthrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.ClusterNodeServiceStepRequest.prototype.hasNodeAuthrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.orderer.ClusterNodeServiceStepResponse.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.orderer.ClusterNodeServiceStepResponse.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  TRANORDER_RES: 1
};

/**
 * @return {proto.orderer.ClusterNodeServiceStepResponse.PayloadCase}
 */
proto.orderer.ClusterNodeServiceStepResponse.prototype.getPayloadCase = function() {
  return /** @type {proto.orderer.ClusterNodeServiceStepResponse.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.orderer.ClusterNodeServiceStepResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.ClusterNodeServiceStepResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.ClusterNodeServiceStepResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.ClusterNodeServiceStepResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.ClusterNodeServiceStepResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tranorderRes: (f = msg.getTranorderRes()) && proto.orderer.TransactionOrderResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.ClusterNodeServiceStepResponse}
 */
proto.orderer.ClusterNodeServiceStepResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.ClusterNodeServiceStepResponse;
  return proto.orderer.ClusterNodeServiceStepResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.ClusterNodeServiceStepResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.ClusterNodeServiceStepResponse}
 */
proto.orderer.ClusterNodeServiceStepResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orderer.TransactionOrderResponse;
      reader.readMessage(value,proto.orderer.TransactionOrderResponse.deserializeBinaryFromReader);
      msg.setTranorderRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.ClusterNodeServiceStepResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.ClusterNodeServiceStepResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.ClusterNodeServiceStepResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.ClusterNodeServiceStepResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranorderRes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orderer.TransactionOrderResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransactionOrderResponse tranorder_res = 1;
 * @return {?proto.orderer.TransactionOrderResponse}
 */
proto.orderer.ClusterNodeServiceStepResponse.prototype.getTranorderRes = function() {
  return /** @type{?proto.orderer.TransactionOrderResponse} */ (
    jspb.Message.getWrapperField(this, proto.orderer.TransactionOrderResponse, 1));
};


/**
 * @param {?proto.orderer.TransactionOrderResponse|undefined} value
 * @return {!proto.orderer.ClusterNodeServiceStepResponse} returns this
*/
proto.orderer.ClusterNodeServiceStepResponse.prototype.setTranorderRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.orderer.ClusterNodeServiceStepResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.ClusterNodeServiceStepResponse} returns this
 */
proto.orderer.ClusterNodeServiceStepResponse.prototype.clearTranorderRes = function() {
  return this.setTranorderRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.ClusterNodeServiceStepResponse.prototype.hasTranorderRes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.NodeConsensusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.NodeConsensusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.NodeConsensusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.NodeConsensusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.NodeConsensusRequest}
 */
proto.orderer.NodeConsensusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.NodeConsensusRequest;
  return proto.orderer.NodeConsensusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.NodeConsensusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.NodeConsensusRequest}
 */
proto.orderer.NodeConsensusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.NodeConsensusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.NodeConsensusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.NodeConsensusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.NodeConsensusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.orderer.NodeConsensusRequest.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.orderer.NodeConsensusRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.orderer.NodeConsensusRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.orderer.NodeConsensusRequest} returns this
 */
proto.orderer.NodeConsensusRequest.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes metadata = 2;
 * @return {!(string|Uint8Array)}
 */
proto.orderer.NodeConsensusRequest.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes metadata = 2;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.orderer.NodeConsensusRequest.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.orderer.NodeConsensusRequest.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.orderer.NodeConsensusRequest} returns this
 */
proto.orderer.NodeConsensusRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.NodeTransactionOrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.NodeTransactionOrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.NodeTransactionOrderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.NodeTransactionOrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastValidationSeq: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: (f = msg.getPayload()) && common_common_pb.Envelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.NodeTransactionOrderRequest}
 */
proto.orderer.NodeTransactionOrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.NodeTransactionOrderRequest;
  return proto.orderer.NodeTransactionOrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.NodeTransactionOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.NodeTransactionOrderRequest}
 */
proto.orderer.NodeTransactionOrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastValidationSeq(value);
      break;
    case 2:
      var value = new common_common_pb.Envelope;
      reader.readMessage(value,common_common_pb.Envelope.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.NodeTransactionOrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.NodeTransactionOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.NodeTransactionOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.NodeTransactionOrderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastValidationSeq();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Envelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 last_validation_seq = 1;
 * @return {number}
 */
proto.orderer.NodeTransactionOrderRequest.prototype.getLastValidationSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.NodeTransactionOrderRequest} returns this
 */
proto.orderer.NodeTransactionOrderRequest.prototype.setLastValidationSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional common.Envelope payload = 2;
 * @return {?proto.common.Envelope}
 */
proto.orderer.NodeTransactionOrderRequest.prototype.getPayload = function() {
  return /** @type{?proto.common.Envelope} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Envelope, 2));
};


/**
 * @param {?proto.common.Envelope|undefined} value
 * @return {!proto.orderer.NodeTransactionOrderRequest} returns this
*/
proto.orderer.NodeTransactionOrderRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.NodeTransactionOrderRequest} returns this
 */
proto.orderer.NodeTransactionOrderRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.NodeTransactionOrderRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.TransactionOrderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.TransactionOrderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.TransactionOrderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.TransactionOrderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    info: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.TransactionOrderResponse}
 */
proto.orderer.TransactionOrderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.TransactionOrderResponse;
  return proto.orderer.TransactionOrderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.TransactionOrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.TransactionOrderResponse}
 */
proto.orderer.TransactionOrderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 3:
      var value = /** @type {!proto.common.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.TransactionOrderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.TransactionOrderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.TransactionOrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.TransactionOrderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.orderer.TransactionOrderResponse.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.TransactionOrderResponse} returns this
 */
proto.orderer.TransactionOrderResponse.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tx_id = 2;
 * @return {string}
 */
proto.orderer.TransactionOrderResponse.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.TransactionOrderResponse} returns this
 */
proto.orderer.TransactionOrderResponse.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional common.Status status = 3;
 * @return {!proto.common.Status}
 */
proto.orderer.TransactionOrderResponse.prototype.getStatus = function() {
  return /** @type {!proto.common.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.common.Status} value
 * @return {!proto.orderer.TransactionOrderResponse} returns this
 */
proto.orderer.TransactionOrderResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string info = 4;
 * @return {string}
 */
proto.orderer.TransactionOrderResponse.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.TransactionOrderResponse} returns this
 */
proto.orderer.TransactionOrderResponse.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.NodeAuthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.NodeAuthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.NodeAuthRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.NodeAuthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signature: msg.getSignature_asB64(),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    fromId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    toId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sessionBinding: msg.getSessionBinding_asB64(),
    channel: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.NodeAuthRequest}
 */
proto.orderer.NodeAuthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.NodeAuthRequest;
  return proto.orderer.NodeAuthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.NodeAuthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.NodeAuthRequest}
 */
proto.orderer.NodeAuthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToId(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionBinding(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.NodeAuthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.NodeAuthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.NodeAuthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.NodeAuthRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFromId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getToId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSessionBinding_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.orderer.NodeAuthRequest.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.NodeAuthRequest} returns this
 */
proto.orderer.NodeAuthRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.orderer.NodeAuthRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.orderer.NodeAuthRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.orderer.NodeAuthRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.orderer.NodeAuthRequest} returns this
 */
proto.orderer.NodeAuthRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.orderer.NodeAuthRequest.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.orderer.NodeAuthRequest} returns this
*/
proto.orderer.NodeAuthRequest.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.NodeAuthRequest} returns this
 */
proto.orderer.NodeAuthRequest.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.NodeAuthRequest.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 from_id = 4;
 * @return {number}
 */
proto.orderer.NodeAuthRequest.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.NodeAuthRequest} returns this
 */
proto.orderer.NodeAuthRequest.prototype.setFromId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 to_id = 5;
 * @return {number}
 */
proto.orderer.NodeAuthRequest.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.NodeAuthRequest} returns this
 */
proto.orderer.NodeAuthRequest.prototype.setToId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes session_binding = 6;
 * @return {!(string|Uint8Array)}
 */
proto.orderer.NodeAuthRequest.prototype.getSessionBinding = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes session_binding = 6;
 * This is a type-conversion wrapper around `getSessionBinding()`
 * @return {string}
 */
proto.orderer.NodeAuthRequest.prototype.getSessionBinding_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionBinding()));
};


/**
 * optional bytes session_binding = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionBinding()`
 * @return {!Uint8Array}
 */
proto.orderer.NodeAuthRequest.prototype.getSessionBinding_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionBinding()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.orderer.NodeAuthRequest} returns this
 */
proto.orderer.NodeAuthRequest.prototype.setSessionBinding = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string channel = 7;
 * @return {string}
 */
proto.orderer.NodeAuthRequest.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.NodeAuthRequest} returns this
 */
proto.orderer.NodeAuthRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


goog.object.extend(exports, proto.orderer);
