// package: orderer
// file: orderer/clusterserver.proto

import * as jspb from "google-protobuf";
import * as common_common_pb from "../common/common_pb";
import * as google_protobuf_timestamp_pb from "google-protobuf/google/protobuf/timestamp_pb";

export class ClusterNodeServiceStepRequest extends jspb.Message {
  hasNodeConrequest(): boolean;
  clearNodeConrequest(): void;
  getNodeConrequest(): NodeConsensusRequest | undefined;
  setNodeConrequest(value?: NodeConsensusRequest): void;

  hasNodeTranrequest(): boolean;
  clearNodeTranrequest(): void;
  getNodeTranrequest(): NodeTransactionOrderRequest | undefined;
  setNodeTranrequest(value?: NodeTransactionOrderRequest): void;

  hasNodeAuthrequest(): boolean;
  clearNodeAuthrequest(): void;
  getNodeAuthrequest(): NodeAuthRequest | undefined;
  setNodeAuthrequest(value?: NodeAuthRequest): void;

  getPayloadCase(): ClusterNodeServiceStepRequest.PayloadCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ClusterNodeServiceStepRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ClusterNodeServiceStepRequest): ClusterNodeServiceStepRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ClusterNodeServiceStepRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ClusterNodeServiceStepRequest;
  static deserializeBinaryFromReader(message: ClusterNodeServiceStepRequest, reader: jspb.BinaryReader): ClusterNodeServiceStepRequest;
}

export namespace ClusterNodeServiceStepRequest {
  export type AsObject = {
    nodeConrequest?: NodeConsensusRequest.AsObject,
    nodeTranrequest?: NodeTransactionOrderRequest.AsObject,
    nodeAuthrequest?: NodeAuthRequest.AsObject,
  }

  export enum PayloadCase {
    PAYLOAD_NOT_SET = 0,
    NODE_CONREQUEST = 1,
    NODE_TRANREQUEST = 2,
    NODE_AUTHREQUEST = 3,
  }
}

export class ClusterNodeServiceStepResponse extends jspb.Message {
  hasTranorderRes(): boolean;
  clearTranorderRes(): void;
  getTranorderRes(): TransactionOrderResponse | undefined;
  setTranorderRes(value?: TransactionOrderResponse): void;

  getPayloadCase(): ClusterNodeServiceStepResponse.PayloadCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ClusterNodeServiceStepResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ClusterNodeServiceStepResponse): ClusterNodeServiceStepResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ClusterNodeServiceStepResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ClusterNodeServiceStepResponse;
  static deserializeBinaryFromReader(message: ClusterNodeServiceStepResponse, reader: jspb.BinaryReader): ClusterNodeServiceStepResponse;
}

export namespace ClusterNodeServiceStepResponse {
  export type AsObject = {
    tranorderRes?: TransactionOrderResponse.AsObject,
  }

  export enum PayloadCase {
    PAYLOAD_NOT_SET = 0,
    TRANORDER_RES = 1,
  }
}

export class NodeConsensusRequest extends jspb.Message {
  getPayload(): Uint8Array | string;
  getPayload_asU8(): Uint8Array;
  getPayload_asB64(): string;
  setPayload(value: Uint8Array | string): void;

  getMetadata(): Uint8Array | string;
  getMetadata_asU8(): Uint8Array;
  getMetadata_asB64(): string;
  setMetadata(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NodeConsensusRequest.AsObject;
  static toObject(includeInstance: boolean, msg: NodeConsensusRequest): NodeConsensusRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NodeConsensusRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NodeConsensusRequest;
  static deserializeBinaryFromReader(message: NodeConsensusRequest, reader: jspb.BinaryReader): NodeConsensusRequest;
}

export namespace NodeConsensusRequest {
  export type AsObject = {
    payload: Uint8Array | string,
    metadata: Uint8Array | string,
  }
}

export class NodeTransactionOrderRequest extends jspb.Message {
  getLastValidationSeq(): number;
  setLastValidationSeq(value: number): void;

  hasPayload(): boolean;
  clearPayload(): void;
  getPayload(): common_common_pb.Envelope | undefined;
  setPayload(value?: common_common_pb.Envelope): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NodeTransactionOrderRequest.AsObject;
  static toObject(includeInstance: boolean, msg: NodeTransactionOrderRequest): NodeTransactionOrderRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NodeTransactionOrderRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NodeTransactionOrderRequest;
  static deserializeBinaryFromReader(message: NodeTransactionOrderRequest, reader: jspb.BinaryReader): NodeTransactionOrderRequest;
}

export namespace NodeTransactionOrderRequest {
  export type AsObject = {
    lastValidationSeq: number,
    payload?: common_common_pb.Envelope.AsObject,
  }
}

export class TransactionOrderResponse extends jspb.Message {
  getChannel(): string;
  setChannel(value: string): void;

  getTxId(): string;
  setTxId(value: string): void;

  getStatus(): common_common_pb.StatusMap[keyof common_common_pb.StatusMap];
  setStatus(value: common_common_pb.StatusMap[keyof common_common_pb.StatusMap]): void;

  getInfo(): string;
  setInfo(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TransactionOrderResponse.AsObject;
  static toObject(includeInstance: boolean, msg: TransactionOrderResponse): TransactionOrderResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TransactionOrderResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TransactionOrderResponse;
  static deserializeBinaryFromReader(message: TransactionOrderResponse, reader: jspb.BinaryReader): TransactionOrderResponse;
}

export namespace TransactionOrderResponse {
  export type AsObject = {
    channel: string,
    txId: string,
    status: common_common_pb.StatusMap[keyof common_common_pb.StatusMap],
    info: string,
  }
}

export class NodeAuthRequest extends jspb.Message {
  getVersion(): number;
  setVersion(value: number): void;

  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  hasTimestamp(): boolean;
  clearTimestamp(): void;
  getTimestamp(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setTimestamp(value?: google_protobuf_timestamp_pb.Timestamp): void;

  getFromId(): number;
  setFromId(value: number): void;

  getToId(): number;
  setToId(value: number): void;

  getSessionBinding(): Uint8Array | string;
  getSessionBinding_asU8(): Uint8Array;
  getSessionBinding_asB64(): string;
  setSessionBinding(value: Uint8Array | string): void;

  getChannel(): string;
  setChannel(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NodeAuthRequest.AsObject;
  static toObject(includeInstance: boolean, msg: NodeAuthRequest): NodeAuthRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NodeAuthRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NodeAuthRequest;
  static deserializeBinaryFromReader(message: NodeAuthRequest, reader: jspb.BinaryReader): NodeAuthRequest;
}

export namespace NodeAuthRequest {
  export type AsObject = {
    version: number,
    signature: Uint8Array | string,
    timestamp?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    fromId: number,
    toId: number,
    sessionBinding: Uint8Array | string,
    channel: string,
  }
}

