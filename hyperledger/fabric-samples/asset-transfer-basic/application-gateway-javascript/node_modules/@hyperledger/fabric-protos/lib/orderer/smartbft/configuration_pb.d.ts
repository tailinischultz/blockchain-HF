// package: orderer.smartbft
// file: orderer/smartbft/configuration.proto

import * as jspb from "google-protobuf";

export class Options extends jspb.Message {
  getRequestBatchMaxCount(): number;
  setRequestBatchMaxCount(value: number): void;

  getRequestBatchMaxBytes(): number;
  setRequestBatchMaxBytes(value: number): void;

  getRequestBatchMaxInterval(): string;
  setRequestBatchMaxInterval(value: string): void;

  getIncomingMessageBufferSize(): number;
  setIncomingMessageBufferSize(value: number): void;

  getRequestPoolSize(): number;
  setRequestPoolSize(value: number): void;

  getRequestForwardTimeout(): string;
  setRequestForwardTimeout(value: string): void;

  getRequestComplainTimeout(): string;
  setRequestComplainTimeout(value: string): void;

  getRequestAutoRemoveTimeout(): string;
  setRequestAutoRemoveTimeout(value: string): void;

  getRequestMaxBytes(): number;
  setRequestMaxBytes(value: number): void;

  getViewChangeResendInterval(): string;
  setViewChangeResendInterval(value: string): void;

  getViewChangeTimeout(): string;
  setViewChangeTimeout(value: string): void;

  getLeaderHeartbeatTimeout(): string;
  setLeaderHeartbeatTimeout(value: string): void;

  getLeaderHeartbeatCount(): number;
  setLeaderHeartbeatCount(value: number): void;

  getCollectTimeout(): string;
  setCollectTimeout(value: string): void;

  getSyncOnStart(): boolean;
  setSyncOnStart(value: boolean): void;

  getSpeedUpViewChange(): boolean;
  setSpeedUpViewChange(value: boolean): void;

  getLeaderRotation(): Options.RotationMap[keyof Options.RotationMap];
  setLeaderRotation(value: Options.RotationMap[keyof Options.RotationMap]): void;

  getDecisionsPerLeader(): number;
  setDecisionsPerLeader(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Options.AsObject;
  static toObject(includeInstance: boolean, msg: Options): Options.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Options, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Options;
  static deserializeBinaryFromReader(message: Options, reader: jspb.BinaryReader): Options;
}

export namespace Options {
  export type AsObject = {
    requestBatchMaxCount: number,
    requestBatchMaxBytes: number,
    requestBatchMaxInterval: string,
    incomingMessageBufferSize: number,
    requestPoolSize: number,
    requestForwardTimeout: string,
    requestComplainTimeout: string,
    requestAutoRemoveTimeout: string,
    requestMaxBytes: number,
    viewChangeResendInterval: string,
    viewChangeTimeout: string,
    leaderHeartbeatTimeout: string,
    leaderHeartbeatCount: number,
    collectTimeout: string,
    syncOnStart: boolean,
    speedUpViewChange: boolean,
    leaderRotation: Options.RotationMap[keyof Options.RotationMap],
    decisionsPerLeader: number,
  }

  export interface RotationMap {
    ROTATION_UNSPECIFIED: 0;
    ROTATION_OFF: 1;
    ROTATION_ON: 2;
  }

  export const Rotation: RotationMap;
}

