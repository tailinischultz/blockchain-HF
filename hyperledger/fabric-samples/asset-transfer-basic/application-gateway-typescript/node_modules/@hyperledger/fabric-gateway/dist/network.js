"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkImpl = void 0;
const blockeventsbuilder_1 = require("./blockeventsbuilder");
const chaincodeeventsbuilder_1 = require("./chaincodeeventsbuilder");
const contract_1 = require("./contract");
class NetworkImpl {
    #client;
    #signingIdentity;
    #channelName;
    #tlsCertificateHash;
    constructor(options) {
        this.#client = options.client;
        this.#signingIdentity = options.signingIdentity;
        this.#channelName = options.channelName;
        this.#tlsCertificateHash = options.tlsCertificateHash;
    }
    getName() {
        return this.#channelName;
    }
    getContract(chaincodeName, contractName) {
        return new contract_1.ContractImpl({
            client: this.#client,
            signingIdentity: this.#signingIdentity,
            channelName: this.#channelName,
            chaincodeName: chaincodeName,
            contractName,
        });
    }
    async getChaincodeEvents(chaincodeName, options) {
        return this.newChaincodeEventsRequest(chaincodeName, options).getEvents();
    }
    newChaincodeEventsRequest(chaincodeName, options = {}) {
        return new chaincodeeventsbuilder_1.ChaincodeEventsBuilder(Object.assign({}, options, {
            chaincodeName: chaincodeName,
            channelName: this.#channelName,
            client: this.#client,
            signingIdentity: this.#signingIdentity,
        })).build();
    }
    async getBlockEvents(options) {
        return this.newBlockEventsRequest(options).getEvents();
    }
    newBlockEventsRequest(options = {}) {
        const builderOptions = this.#newBlockEventsBuilderOptions(options);
        return new blockeventsbuilder_1.BlockEventsBuilder(builderOptions).build();
    }
    async getFilteredBlockEvents(options) {
        return this.newFilteredBlockEventsRequest(options).getEvents();
    }
    newFilteredBlockEventsRequest(options = {}) {
        const builderOptions = this.#newBlockEventsBuilderOptions(options);
        return new blockeventsbuilder_1.FilteredBlockEventsBuilder(builderOptions).build();
    }
    async getBlockAndPrivateDataEvents(options) {
        return this.newBlockAndPrivateDataEventsRequest(options).getEvents();
    }
    newBlockAndPrivateDataEventsRequest(options = {}) {
        const builderOptions = this.#newBlockEventsBuilderOptions(options);
        return new blockeventsbuilder_1.BlockAndPrivateDataEventsBuilder(builderOptions).build();
    }
    #newBlockEventsBuilderOptions(options) {
        return Object.assign({}, options, {
            channelName: this.#channelName,
            client: this.#client,
            signingIdentity: this.#signingIdentity,
            tlsCertificateHash: this.#tlsCertificateHash,
        });
    }
}
exports.NetworkImpl = NetworkImpl;
//# sourceMappingURL=network.js.map